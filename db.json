{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/img/avatar.jpg","path":"img/avatar.jpg","modified":0,"renderable":0},{"_id":"source/img/default-skin.png","path":"img/default-skin.png","modified":0,"renderable":0},{"_id":"source/img/preloader.gif","path":"img/preloader.gif","modified":0,"renderable":0},{"_id":"source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":0},{"_id":"themes/yilia/source/main.b3331d.css","path":"main.b3331d.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/slider.445162.js","path":"slider.445162.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/main.b3331d.js","path":"main.b3331d.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/mobile.8d90af.js","path":"mobile.8d90af.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.3a9902.eot","path":"fonts/iconfont.3a9902.eot","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.6e162c.woff","path":"fonts/iconfont.6e162c.woff","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.9abe9f.svg","path":"fonts/iconfont.9abe9f.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.d0da7e.ttf","path":"fonts/iconfont.d0da7e.ttf","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/avatar.jpg","path":"img/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"d187249cb45a35e069c8b0f0ee7f42b19c5ba681","modified":1497867184086},{"_id":"themes/yilia/.babelrc","hash":"b1b76475ac17dc9e2fa50af96c9e31eea2d0f2b4","modified":1497865686068},{"_id":"themes/yilia/.editorconfig","hash":"da6d022b8f4d9c961e2f8f80677e92af8de0db4d","modified":1497865686068},{"_id":"themes/yilia/.eslintignore","hash":"df0a50b13cc00acb749226fee3cee6e0351fb1d9","modified":1497865686068},{"_id":"themes/yilia/.eslintrc.js","hash":"5696ae049de010ed3786768b0c359f14c05b5ec6","modified":1497865686068},{"_id":"themes/yilia/.gitattributes","hash":"e0f24dceeb1e6878a1dd9b01a2b9df1bc037a867","modified":1497865686068},{"_id":"themes/yilia/.gitignore","hash":"9c4b7d27a1e3e5efa0c8ed143a032a85d586b03b","modified":1497865686068},{"_id":"themes/yilia/README.md","hash":"8444a63c50d8a7e40bb3f1f10e549a60da94a21f","modified":1497865686068},{"_id":"themes/yilia/_config.yml","hash":"d3b3bf5234411abf64fc8ad7262b152b4f197ded","modified":1497874631413},{"_id":"themes/yilia/package.json","hash":"367cb9579d35968a942c243ab248a5f5ebfaf462","modified":1497865686072},{"_id":"themes/yilia/webpack.config.js","hash":"05ba46a4ae744272f5312e684928910dccad3755","modified":1497865686076},{"_id":"source/_posts/caffe框架的搭建和使用.md","hash":"8338859d9abecdc809ec97c16156f5d5617255d2","modified":1497872236329},{"_id":"source/img/avatar.jpg","hash":"276abccf2e10594015781cbbbf5eb090efe1aac9","modified":1497869199273},{"_id":"source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1497865686076},{"_id":"source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1497865686076},{"_id":"source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1497865686076},{"_id":"themes/yilia/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1497865685952},{"_id":"themes/yilia/.git/config","hash":"45dbf7cad960774e3ebd63f878005463a78e4c69","modified":1497865686056},{"_id":"themes/yilia/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1497865676680},{"_id":"themes/yilia/.git/index","hash":"e44981643bb005d4c5a3b0e8726d7bd9710a66a1","modified":1497865686076},{"_id":"themes/yilia/.git/packed-refs","hash":"cf41ff42218453f57f86f8bf8a37ce6b19a31ad9","modified":1497865685952},{"_id":"themes/yilia/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1497865686068},{"_id":"themes/yilia/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1497865686068},{"_id":"themes/yilia/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1497865686068},{"_id":"themes/yilia/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1497865686068},{"_id":"themes/yilia/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1497865686068},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1497865686068},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1497865686068},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1497865686072},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1497865686072},{"_id":"themes/yilia/layout/index.ejs","hash":"a35dc900203f9d8dd863ea4c1722198d6d457ec8","modified":1497865686072},{"_id":"themes/yilia/layout/layout.ejs","hash":"0a332bdbd3b86c231d690614687f5b97186b85d5","modified":1497872730780},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1497865686072},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1497865686072},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1497865686072},{"_id":"themes/yilia/source/main.b3331d.css","hash":"7d0162a4618e8026bd23779f3120c09c83197b9f","modified":1497865686076},{"_id":"themes/yilia/source/slider.445162.js","hash":"e21c3c2cf663d7a4fb0d77f43ae1a148553a7cca","modified":1497865686076},{"_id":"themes/yilia/source-src/css.ejs","hash":"94dbdb02ca11849e415d54fb28546a598f2cffb1","modified":1497865686072},{"_id":"themes/yilia/source-src/script.ejs","hash":"c21381e1317db7bb157f1d182b8c088cb7cba411","modified":1497865686076},{"_id":"themes/yilia/source/main.b3331d.js","hash":"0e98e3674c7687ae4ff7bdcecb05e15434c46e0d","modified":1497865686076},{"_id":"themes/yilia/source/mobile.8d90af.js","hash":"cf2ab659138db5abc70e3e0d7bc64f50d48e834d","modified":1497865686076},{"_id":"source/_posts/attachment/filetxt.c","hash":"9f4cd4e692f83cd7db8014a9ce94157858b160df","modified":1488292776284},{"_id":"themes/yilia/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1497865676684},{"_id":"themes/yilia/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1497865676684},{"_id":"themes/yilia/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1497865676684},{"_id":"themes/yilia/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1497865676684},{"_id":"themes/yilia/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1497865676684},{"_id":"themes/yilia/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1497865676684},{"_id":"themes/yilia/.git/hooks/pre-rebase.sample","hash":"18be3eb275c1decd3614e139f5a311b75f1b0ab8","modified":1497865676684},{"_id":"themes/yilia/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1497865676680},{"_id":"themes/yilia/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1497865676684},{"_id":"themes/yilia/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1497865676680},{"_id":"themes/yilia/.git/logs/HEAD","hash":"c8462096712493a34092ce2a4595a485fcf56d4e","modified":1497865686056},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"143710485f734c5a997e0b1c26192bbba2982bcc","modified":1497865686068},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"1f7d4819b7f67602c4a1b99871808d2160b60978","modified":1497865686068},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a6e94061ac55b9eb55275f87b608d62f6ea35659","modified":1497865686068},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"7547bc40b533d9db62f430c43dc0e595c9caa5b6","modified":1497865686068},{"_id":"themes/yilia/layout/_partial/baidu-analytics.ejs","hash":"f0e6e88f9f7eb08b8fe51449a8a3016273507924","modified":1497865686068},{"_id":"themes/yilia/layout/_partial/css.ejs","hash":"f8a42263edeeb3ccf6115cea5f96f551ed1e76e5","modified":1497865686068},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"f2994e0acd1d606ebf4680afc4fa652e148ccf4e","modified":1497865686068},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1497865686068},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"64f092186b5a744aa1603ce22bb1d44a34446add","modified":1497865686072},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1497865686072},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"653b3d4a5649d1c31a3ae5fece35307fb22bc8e4","modified":1497874902132},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"151a1ef2173ba7b6789d349f0f8da89616cc1394","modified":1497865686072},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"7fbbfabf5e29525b24ada14613c21a26789132b4","modified":1497865686072},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"c41341b9618e591538e1136a2d1637587c1bbd90","modified":1497865686072},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"e495790b2abe2290875817e42bd505bc611d3e26","modified":1497865686072},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1497865686076},{"_id":"themes/yilia/source/fonts/iconfont.3a9902.eot","hash":"51d4e8d333ae7867915037983ea5d4b2ad971930","modified":1497865686076},{"_id":"themes/yilia/source/fonts/iconfont.6e162c.woff","hash":"709373d566526ad4bdb330757a3915e3c5e37b66","modified":1497865686076},{"_id":"themes/yilia/source/fonts/iconfont.9abe9f.svg","hash":"772383b62548e2a4fa560d589e05929b9f6f7f7b","modified":1497865686076},{"_id":"themes/yilia/source/fonts/iconfont.d0da7e.ttf","hash":"53ea5a5027a2fab93bcdad18cad6dc5f1b728726","modified":1497865686076},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1497865686076},{"_id":"themes/yilia/source/img/avatar.jpg","hash":"276abccf2e10594015781cbbbf5eb090efe1aac9","modified":1497869199273},{"_id":"themes/yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1497865686076},{"_id":"themes/yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1497865686076},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1497865686076},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"24f347a2412abbf58318369152504da9538f8d3b","modified":1497865686072},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"93a50dd19a93485712da1f8d0a1672482dd1eabc","modified":1497865686072},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"7d27e22ac898e8fafec14549e940c73cbea1fba8","modified":1497865686072},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"d79f2d35a06de83a2a226ca790b7a0a34789c115","modified":1497865686072},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"3fad68bd74260326f83090b0974dd80707e7bac7","modified":1497865686072},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"43e507f2a48504079afd9471353337e23ca47470","modified":1497865686072},{"_id":"themes/yilia/source-src/css/article.scss","hash":"0f6d61af99ed4db87f8589db1feaea7747b55963","modified":1497865686072},{"_id":"themes/yilia/source-src/css/comment.scss","hash":"e6e83d4863afcc589d4dd2f327e9f396f7d7b343","modified":1497865686072},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"3f5808a49a7365e3f813f78ba96b692f7ca27886","modified":1497865686072},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7c995410b25baaf61dfc5e148e22ca60330abcd3","modified":1497865686072},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1497865686072},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"849a29fcd7150214fcf7b9715fa5dc71d1f9b896","modified":1497865686072},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"3719994c2c9393813cc1d42b657205c368a329cb","modified":1497865686072},{"_id":"themes/yilia/source-src/css/left.scss","hash":"0d30c0e7cdb831c3881a017006c782f2214ac195","modified":1497865686072},{"_id":"themes/yilia/source-src/css/main.scss","hash":"ac8c3312182519e33d0f729d157deb36e5f42894","modified":1497865686072},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"f053c609d84df0dd9eee1d11ddf0c19163a456be","modified":1497865686072},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"a40400734c6509b9ac6e393a6681ccd8bafed5eb","modified":1497865686072},{"_id":"themes/yilia/source-src/css/page.scss","hash":"bf206bb7f7d0967bc8b7fdf01b7ffc99aff9ba88","modified":1497865686072},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"80a4fcf9171d4a33235da96ac8a2b7dcabc45dfb","modified":1497865686072},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"9c8dfd1c76854ef063494ca76fac6360b391ed6d","modified":1497865686072},{"_id":"themes/yilia/source-src/css/share.scss","hash":"150c6425f6582e7ec78a873256ce49c9930e8805","modified":1497865686072},{"_id":"themes/yilia/source-src/css/social.scss","hash":"b5324302815491d0a5e63142f1ead2048ad3f72f","modified":1497865686072},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"c8aa84fca93862d3caae77c552873b8610f33327","modified":1497865686072},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"ac67a3c7097849206244db9b0ba91daaba017ef5","modified":1497865686072},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"17a97f7c38f5dfacc3eadf354b5826d77f1c2bdb","modified":1497865686072},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"53d5a554bc2f38e9bb3d26400a47767013c05216","modified":1497865686072},{"_id":"themes/yilia/source-src/js/Q.js","hash":"d011af172064b6c6e0c7051d8f9879373ddac113","modified":1497865686076},{"_id":"themes/yilia/source-src/js/anm.js","hash":"4a4c5d82b09a3063f91a434388e6aa064fd7fd98","modified":1497865686076},{"_id":"themes/yilia/source-src/js/browser.js","hash":"04095b38cfd4316a23f8eb14b1ffaf95f78a4260","modified":1497865686076},{"_id":"themes/yilia/source-src/js/fix.js","hash":"9591a0f61236a56b2a15a541f572bcfd93823a0f","modified":1497865686076},{"_id":"themes/yilia/source-src/js/main.js","hash":"d665f4cf30450984591bc8ad2348a1baf720d04b","modified":1497865686076},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"4d823b039fd296d24a454eae5a798b93c44560cb","modified":1497865686076},{"_id":"themes/yilia/source-src/js/report.js","hash":"4f1d9a18a936ce40b037f636a39127dd19175b6e","modified":1497865686076},{"_id":"themes/yilia/source-src/js/share.js","hash":"b090f82cf80cba7da764753906d9e2cc2acdf30d","modified":1497865686076},{"_id":"themes/yilia/source-src/js/slider.js","hash":"3bf0d70ae171404a0dc73c33ec48927fc2521a54","modified":1497865686076},{"_id":"themes/yilia/source-src/js/util.js","hash":"8456e9d6b19532742582c99b2fb9d09e146e1c58","modified":1497865686076},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"808a2e1ed407984cfdc929b827d3638f70ec9a2a","modified":1497865686076},{"_id":"source/_posts/md_pic/additional_drivers_option.png","hash":"7cd80548efc9f00e79745f11112c85262b52ff04","modified":1488292776348},{"_id":"source/_posts/md_pic/leaf.png","hash":"2ee7ff035ff171e1fd366884ec9cabd290d0d715","modified":1488292776532},{"_id":"source/_posts/md_pic/mnist_result.png","hash":"0f49b0410ef2daed2a997d3432624bb743d1cc72","modified":1488292776408},{"_id":"source/_posts/md_pic/txt.png","hash":"d5cf610de891b187cd61705ac50c28faf9dccd1a","modified":1488292776468},{"_id":"themes/yilia/layout/_partial/script.ejs","hash":"6160c13783a7f31dab4fdcc6b752b3a368586d67","modified":1497865686072},{"_id":"themes/yilia/.git/objects/pack/pack-149e73dd21ac165412f3146538f0edfe9cab3b36.idx","hash":"b5c96f156ea151d3839346b96cf9478dc0c7e181","modified":1497865685908},{"_id":"themes/yilia/.git/refs/heads/master","hash":"597a0d14c701a189e5d74eaa70341e78e3ad7c80","modified":1497865685952},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"c2dccf1a95ec09ceeee5004293ac7edb7e1c9a66","modified":1497865686072},{"_id":"themes/yilia/layout/_partial/post/changyan.ejs","hash":"9f9fa4f8b0de5f87a9494fd0cb5064502a5d5ef5","modified":1497865686072},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"ef71c4081e866a494367575c59610e7e6339ece0","modified":1497865686072},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"e8399025ed3b980aedb821c92855889f5f12fd5b","modified":1497865686072},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"1036c8e4e1a7bc935ba173744da735a0d6ed09cd","modified":1497865686072},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"341103df70d0b476e3acd0afbc507a4a120d8f5f","modified":1497865686072},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"2e783e68755abb852760eb0e627a3fbb50a05a55","modified":1497865686072},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1497865686072},{"_id":"themes/yilia/layout/_partial/post/wangyiyun.ejs","hash":"ea41c462168d9697caef9485862e9cac718a12c1","modified":1497865686072},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"63a37f26276f9207405afe0f2d65339ce295bbaf","modified":1497865686072},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"491ab3378d5c11005ba65c607608bb36b368a9d5","modified":1497865686072},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"3bba5c77bad5981eac859fe05c9561d580ba7fa9","modified":1497865686072},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"fab871fa93bd542e76a71a56428f2994a4aaf443","modified":1497865686072},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"fb511c505d1309249f21dc577d4ad2bad99a764f","modified":1497865686072},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"51d4e8d333ae7867915037983ea5d4b2ad971930","modified":1497865686072},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"772383b62548e2a4fa560d589e05929b9f6f7f7b","modified":1497865686072},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"53ea5a5027a2fab93bcdad18cad6dc5f1b728726","modified":1497865686072},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"709373d566526ad4bdb330757a3915e3c5e37b66","modified":1497865686072},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1497865686072},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1497865686072},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1497865686072},{"_id":"themes/yilia/.git/logs/refs/heads/master","hash":"c8462096712493a34092ce2a4595a485fcf56d4e","modified":1497865686056},{"_id":"themes/yilia/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1497865685952},{"_id":"themes/yilia/.git/logs/refs/remotes/origin/HEAD","hash":"c8462096712493a34092ce2a4595a485fcf56d4e","modified":1497865685952},{"_id":"themes/yilia/.git/objects/pack/pack-149e73dd21ac165412f3146538f0edfe9cab3b36.pack","hash":"ac7f9af6c96969bf7610ba6c41a96860378baac3","modified":1497865685908},{"_id":"public/content.json","hash":"44d6da18ce5d4cc337dda27a21bfbd80086f072b","modified":1497872957989},{"_id":"public/2017/02/25/caffe框架的搭建和使用/index.html","hash":"2b0dabf88fdd5c4ee65b8f9228d0f0de7103845d","modified":1497873263368},{"_id":"public/archives/index.html","hash":"e7f98b5abe474620e069bc8b5b17e1afb0e6d3c4","modified":1497873263368},{"_id":"public/archives/2017/index.html","hash":"568ed3874566be4efde01ceee5c6d461c3cf6612","modified":1497873263369},{"_id":"public/archives/2017/02/index.html","hash":"6b946e591c3089f10e0f0da6187fbc8b8b25c3c3","modified":1497873263369},{"_id":"public/index.html","hash":"fea0b914ef3ea7764908cafc62d7a4a9a4823923","modified":1497873263369},{"_id":"public/tags/caffe-dl-CNN/index.html","hash":"3d54a904a0f2a2e6d22eaf7361c10233ba3cf84c","modified":1497873263369},{"_id":"public/CNAME","hash":"d187249cb45a35e069c8b0f0ee7f42b19c5ba681","modified":1497872958055},{"_id":"public/img/avatar.jpg","hash":"276abccf2e10594015781cbbbf5eb090efe1aac9","modified":1497872958056},{"_id":"public/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1497872958056},{"_id":"public/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1497872958056},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1497872958056},{"_id":"public/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1497872958056},{"_id":"public/fonts/iconfont.3a9902.eot","hash":"51d4e8d333ae7867915037983ea5d4b2ad971930","modified":1497872958056},{"_id":"public/fonts/iconfont.6e162c.woff","hash":"709373d566526ad4bdb330757a3915e3c5e37b66","modified":1497872958056},{"_id":"public/fonts/iconfont.9abe9f.svg","hash":"772383b62548e2a4fa560d589e05929b9f6f7f7b","modified":1497872958056},{"_id":"public/fonts/iconfont.d0da7e.ttf","hash":"53ea5a5027a2fab93bcdad18cad6dc5f1b728726","modified":1497872958056},{"_id":"public/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1497872958056},{"_id":"public/main.b3331d.css","hash":"7d0162a4618e8026bd23779f3120c09c83197b9f","modified":1497872958059},{"_id":"public/slider.445162.js","hash":"e21c3c2cf663d7a4fb0d77f43ae1a148553a7cca","modified":1497872958059},{"_id":"public/mobile.8d90af.js","hash":"cf2ab659138db5abc70e3e0d7bc64f50d48e834d","modified":1497872958059},{"_id":"public/main.b3331d.js","hash":"0e98e3674c7687ae4ff7bdcecb05e15434c46e0d","modified":1497872958059}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"caffe框架的搭建和使用","date":"2017-02-24T19:40:16.000Z","_content":"## 简介 ##\n直到现在才对学习的caffe框架进行总结，东西比较多。\ncaffe已经被扩展到了Windows和Linux底下，两种方式我都有尝试，里面的坎坷还不是一般的多，简单来讲并不好上手，个人建议了解为主，以后有针对性地使用。\n优点：数据转化为DB格式，处理起来的速度是及其快的；\n缺点：全程C代码编写，不对框架十分了解的话会出现很多小毛病。\n刚刚年前caffe框架更新，导致我编写的层在编译的时候都报错了。郁闷！\n本文将介绍caffe在ubuntu下的编译和使用，例子：手写数字体识别。\n\n<!--more-->\n\n## caffe + ubuntu16.04LTS + cuda8.0 + GTX960##\n对于什么都没有的ubuntu16.04LTS，需要先安装驱动和各种附加包。\n### <font color=red>安装依赖项</font> ###\n\n\tsudo apt-get install libprotobuf-dev libleveldb-dev libsnappy-dev libopencv-dev libhdf5-serial-dev protobuf-compiler \n\tsudo apt-get install --no-install-recommends libboost-all-dev\n\tsudo apt-get install libopenblas-dev liblapack-dev libatlas-base-dev\n\tsudo apt-get install libgflags-dev libgoogle-glog-dev liblmdb-dev\n\t\n### <font color=red>安装显卡驱动</font> ###\n注：如果只用CPU编译，可以跳过此部分。\n#### <font color=blue>方式一</font> ####\n左上角（`win`键）-> 附加驱动（additional drivers）\n![additional_drivers_option](./md_pic/additional_drivers_option.png \"additional_drivers_option\")\n然后就能看到驱动了。\n#### <font color=blue>方式二</font> ####\n 进入[http://www.geforce.cn/drivers](http://www.geforce.cn/drivers/ \"drivers\") ，选择合适的驱动下载。\n 下载得到的文件是`.run`文件。\n 卸载已经存在的驱动版本\n \n \tsudo apt-get remove --purge nvidia*\n \t\n `Ctrl+Alt+F1`切换到tty1控制台后，输入\n\n\tsudo service lightdm stop\n\tinit 3\n\n接下来\n\n\tsudo ./NVIDIA.run#文件路径\n\n开始安装。\n期间不同电脑会有不同的问题出现。我有碰到过硬盘保护的情况，不过按照提示进行操作就可以了。\n另外，既然做了千万不要半途而废，我反复了好几次才把事情搞定，还不如一开始一口气做到底。\n#### <font color=blue>方式三</font> ####\n直接在命令行下载驱动，也要进行进入tty1的操作，同方法二。\n\n\tsudo add-apt-repository ppa:xorg-edgers/ppa\n\tsudo apt-get update\n\tsudo apt-get install nvidia-378 #自己指定的版本\n\n这个方法我曾经尝试过，一定是可行的，不过细节方面可以上网查询下。\n\n### <font color=red>安装CUDA</font> ###\n\nCUDA是NVIDIA的编程语言平台，想使用GPU就必须要使用cuda。\n进入[https://developer.nvidia.com/cuda-downloads](https://developer.nvidia.com/cuda-downloads\"cuda\")下载cuda。\n\n\tsudo sh cuda_8.0.27_linux.run#你的版本\n\n其中有确认是否安装显卡驱动，根据自己选择来进行安装。\n\n打开`~/.bashrc`\n\t\n\tsudo gedit ~/.bashrc\n将以下内容写到尾部\n\n\texport PATH=/usr/local/cuda-8.0/bin${PATH:+:${PATH}}\n\texport LD_LIBRARY_PATH=/usr/local/cuda-8.0/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}\n\n### <font color=red>安装CUDNN</font> ###\n进入[https://developer.nvidia.com/rdp/cudnn-download](https://developer.nvidia.com/rdp/cudnn-download\"cudnn\")，需要注册一个账号，选择对应版本下载。\n下载之后解压。\n进入`include`目录\n\n\tsudo cp cudnn.h /usr/local/cuda/include/    #复制头文件\n\t\n返回在进入`lib64`目录\n\n\tsudo cp lib* /usr/local/cuda/lib64/    #复制动态链接库\n\tcd /usr/local/cuda/lib64/\n\tsudo rm -rf libcudnn.so libcudnn.so.5    #删除原有动态文件\n\tsudo ln -s libcudnn.so.5.1.5 libcudnn.so.5  #生成软衔接，注意版本\n\tsudo ln -s libcudnn.so.5 libcudnn.so      #生成软链接\n\n\n### <font color=red>安装OPENCV</font> ###\n进入[http://opencv.org/downloads.html](http://opencv.org/downloads.html\"opencv\")下载并解压，进入文件夹\n\n\tmkdir build\n\tcd build\n\tcmake -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=/usr/local ..  #cmake自己装\n\tmake -j8#完成后一定要记得下一步install\n\tsudo make install\n\t\n如果出现以下错误\n\n\tmodules/cudalegacy/src/graphcuts.cpp:120:54: error: ‘NppiGraphcutState’ has not been declared typedef NppStatus (*init_func_t)(NppiSize oSize, NppiGraphcutState** ppState, Npp8u* pDeviceMem);\n\n这是因为opecv3.0与cuda8.0不兼容导致的。解决办法：\n修改 `~/opencv/modules/cudalegacy/src/graphcuts.cpp`文件内容，将\n\n\t#if !defined (HAVE_CUDA) || defined (CUDA_DISABLER)\n\n改为\n\n\t#if !defined (HAVE_CUDA) || defined (CUDA_DISABLER) || (CUDART_VERSION>=8000)\n\t\n进入`/etc/ld.so.conf.d`，新建`opencv.conf`，添加\n\t\n\t/home/roee/opencv/build/lib\n保存文件后，更新\n\n\tldconfig\n\t\n### <font color=red>安装CAFFE</font> ###\n#### <font color=blue>从github上获取caffe</font> ####\n\n\t\n\tgit clone https://github.com/BVLC/caffe.git #git自己安装\n\t\n#### <font color=blue>配置Makefile.config</font> ####\n\n复制`Makefile.config.example`为`Makefile.config`\n\n\tsudo cp Makefile.config.example Makefile.config\n\tsudo gedit Makefile.config\n\n若仅用cpu，则\n\n\t将\n\t# CPU_ONLY := 1\n\t修改成： \n\tCPU_ONLY := 1\n\n若使用cudnn，则\n\n\t将\n\t# USE_CUDNN := 1\n\t修改成： \n\tUSE_CUDNN := 1\n\t\n若使用的opencv版本是3的，则\n\n\t将\n\t# OPENCV_VERSION := 3 \n\t修改为： \n\tOPENCV_VERSION := 3\n\t\n若要使用Python来编写layer，则\n\n\t将\n\t# WITH_PYTHON_LAYER := 1 \n\t修改为 \n\tWITH_PYTHON_LAYER := 1\n\t\n接下来一定要修改的一项\n\n\t将\n\t# Whatever else you find you need goes here.\t\n\t下面的\n\tINCLUDE_DIRS := $(PYTHON_INCLUDE) /usr/local/include\n\tLIBRARY_DIRS := $(PYTHON_LIB) /usr/local/lib /usr/lib \n\t修改为\n\tINCLUDE_DIRS := $(PYTHON_INCLUDE) /usr/local/include /usr/include/hdf5/serial\n\tLIBRARY_DIRS := $(PYTHON_LIB) /usr/local/lib /usr/lib /usr/lib/x86_64-linux-gnu /usr/lib/x86_64-linux-gnu/hdf5/serial\n\n这是因为ubuntu16.04的文件包含位置发生了变化，尤其是需要用到的hdf5的位置，所以需要更改这一路径。\n\n#### <font color=blue>修改Makefile文件</font> ####\n打开Mkefile文件\n\n\t将\n\tNVCCFLAGS += -ccbin=$(CXX) -Xcompiler -fPIC $(COMMON_FLAGS)\n\t改为\n\tNVCCFLAGS += -D_FORCE_INLINES -ccbin=$(CXX) -Xcompiler -fPIC $(COMMON_FLAGS)\n\t\n\t将\n\tLIBRARIES += glog gflags protobuf boost_system boost_filesystem m hdf5_hl hdf5\n\t改为\n\tLIBRARIES += glog gflags protobuf boost_system boost_filesystem m hdf5_serial_hl hdf5_serial\n\t\n#### <font color=blue>修改host_config.h文件</font> ####\n编辑`/usr/local/cuda/include/host_config.h`\n\n\t将\n\t#error-- unsupported GNU version! gcc versions later than 5 are not supported!\n\t注释掉，即改为\n\t//#error-- unsupported GNU version! gcc versions later than 5 are not supported!\n\t\n#### <font color=blue>编译caffe</font> ####\n\t\n\tmake all -j8\n\t\n软链接问题报错的话，解决方法网上有，较易解决。\n\n### <font color=red>测试MNIST</font> ###\n打开caffe文件，下载mnist数据集\n\n\tsh data/mnist/get_mnist.sh\n\t\n生成mnist的db文件\n\n\tsh examples/mnist/create_mnist.sh\n\t\n用最lenet训练mnist数据集\n\n\tsh examples/mnist/train_lenet.sh\n\t\n结果\n\n![mnist_result](./md_pic/mnist_result.png  \"mnist_result\")\n\t\n其中`accracy = 0.9956`就是测试集的正确率。\n\n### <font color=red>训练自己的图片</font> ###\n\t\n就是现在自己手头上有很多图片，想通过训练得到模型，并进行测试。\n那么将你所有的图片（需要都有`label`）放到一起，交叉验证什么的方式等看完下文自己类比就行。\n#### <font color=blue>选定图片</font> ####\n例如我得到很多叶子的形状，都放入`images`底下\n\n![leaf](./md_pic/leaf.png  \"leaf\")\n\n#### <font color=blue>生成文件路径txt</font> ####\n接下来编辑一个`txt`文件指明文件夹中的图片名称及其对应的`label`。\n\n![txt](./md_pic/txt.png  \"txt\")\n\n注意`label`一定需要数字，且要和文件路径之间有一个空格，文件结尾不要多出一个行，第一个`/`可以不需要，因为是和根目录联合写成绝对路径的，在之后的使用当中就能理解。\n注：生成这个`txt`文件可以通过任何语言，比较推荐的时BASH脚本的形式，真的很方便。另外我自己编写的C语言脚本是`filetxt.c`，可以自己进行修改。\n\n\n#### <font color=blue>使用convert_imageset生成图片DB格式文件</font> ####\n\t\n\t./build/tools/convert_imageset --shuffle --gray ~/Desktop ~/Desktop/TEST.txt ~/Desktop/x\n\n这段的意思是\n\n\tconvert_imageset工具的路径  选项打乱  选项灰度模式  文件路径  txt文件路径  生成DB数据的文件夹\n\t\n其中选项还有各种其他的，例如resize图片大小等等。另外这里的`文件路径`和`txt文件路径`中的路径联合起来作为绝对路径。\n这样可以生成训练集和测试集DB文件。\n\n#### <font color=blue>使用prototxt进行训练的配置</font> ####\n想好用什么网络训练你的样本。\n编写网络的`prototxt`，里面包括data读入层，各种卷基层、下采样层、激活层、全连接层、损失函数层等等。具体的请在网络上找详细的caffe网络介绍。\n编写网络配置的`prototxt`，里面定义了训练的迭代次数，测试次数，梯度下降方式，使用GPU还是CPU等等，并且在之中指明网络结构的`prototxt`文件。\n这里我极其推荐[http://www.cnblogs.com/denny402/p/](http://www.cnblogs.com/denny402/p/)。这个作者写的博文是我见过最全面最详细的。\n\n#### <font color=blue>训练与测试</font> ####\n训练\n\n\t./build/tools/caffe train --solver=examples/leaf/lenet_solver.prototxt\n\t\n这意思是\n\n\tcaffe文件的路径 字段训练 网络结构的配置文件路径\n\t\n测试\n\n\t./build/tools/caffe test --model=examples/leaf/lenet_solver.prototxt --weights=examples/leaf/1000_iter_lenet.caffemodel\n\t\n这意思是\n\n\tcaffe文件的路径 字段测试 网络结构的配置文件路径  训练的权值文件\n\t\n#### <font color=blue>单独测试一张图片</font> ####\n先使用compute_image_mean生成训练集的均值文件。\n\n\t./build/tools/compute_image_mean examples/leaf/train_lmdb mean.binaryproto\n\t\n这里\n\n\tcompute_image_mean路径  训练集DB数据路径  均值文件名\n\n\n再编写一个`words.txt`，里面是数字类标对应的类别名称，例\n\n\tAcer_Capillipes\n\tAcer_Circinatum\n\tAcer_Mono\n\tAcer_Opalus\n\tAcer_Palmatum\n\tAcer_Pictum\n\tAcer_Platanoids\n\tAcer_Rubrum\n\t...\n\t\n注意最后一行不要有空格或者回车，数字类标有多少，对应有几行。\n\n用之的所有东西，测试新的一张图片应该被标记为什么`label`。\n使用`classification.bin`\n\n\t./build/examples/cpp_classification/classification.bin examples/leaf/lenet.prototxt examples/leaf/lenet_iter_1000.caffemodel mean.binaryproto words.txt 1.jpg\n\t\n这里\n\n\tclassification.bin的路径  网络结构文件路径  权值模型路径  图片均值文件  类标txt  图片路径\n\t\n例如得到\n\n\t---------- Prediction for /home/roee/Desktop/images/4.jpg ----------\n\t1.0000 - \"Magnolia_Heptapeta\"\n\t0.0000 - \"Acer_Circinatum\"\n\t0.0000 - \"Acer_Opalus\"\n\t0.0000 - \"Acer_Palmatum\"\n\t0.0000 - \"Acer_Capillipes\"\n\n测试便完成了。\n","source":"_posts/caffe框架的搭建和使用.md","raw":"---\ntitle: caffe框架的搭建和使用\ndate: 2017-02-24 19:40:16\ntags: caffe dl CNN\n---\n## 简介 ##\n直到现在才对学习的caffe框架进行总结，东西比较多。\ncaffe已经被扩展到了Windows和Linux底下，两种方式我都有尝试，里面的坎坷还不是一般的多，简单来讲并不好上手，个人建议了解为主，以后有针对性地使用。\n优点：数据转化为DB格式，处理起来的速度是及其快的；\n缺点：全程C代码编写，不对框架十分了解的话会出现很多小毛病。\n刚刚年前caffe框架更新，导致我编写的层在编译的时候都报错了。郁闷！\n本文将介绍caffe在ubuntu下的编译和使用，例子：手写数字体识别。\n\n<!--more-->\n\n## caffe + ubuntu16.04LTS + cuda8.0 + GTX960##\n对于什么都没有的ubuntu16.04LTS，需要先安装驱动和各种附加包。\n### <font color=red>安装依赖项</font> ###\n\n\tsudo apt-get install libprotobuf-dev libleveldb-dev libsnappy-dev libopencv-dev libhdf5-serial-dev protobuf-compiler \n\tsudo apt-get install --no-install-recommends libboost-all-dev\n\tsudo apt-get install libopenblas-dev liblapack-dev libatlas-base-dev\n\tsudo apt-get install libgflags-dev libgoogle-glog-dev liblmdb-dev\n\t\n### <font color=red>安装显卡驱动</font> ###\n注：如果只用CPU编译，可以跳过此部分。\n#### <font color=blue>方式一</font> ####\n左上角（`win`键）-> 附加驱动（additional drivers）\n![additional_drivers_option](./md_pic/additional_drivers_option.png \"additional_drivers_option\")\n然后就能看到驱动了。\n#### <font color=blue>方式二</font> ####\n 进入[http://www.geforce.cn/drivers](http://www.geforce.cn/drivers/ \"drivers\") ，选择合适的驱动下载。\n 下载得到的文件是`.run`文件。\n 卸载已经存在的驱动版本\n \n \tsudo apt-get remove --purge nvidia*\n \t\n `Ctrl+Alt+F1`切换到tty1控制台后，输入\n\n\tsudo service lightdm stop\n\tinit 3\n\n接下来\n\n\tsudo ./NVIDIA.run#文件路径\n\n开始安装。\n期间不同电脑会有不同的问题出现。我有碰到过硬盘保护的情况，不过按照提示进行操作就可以了。\n另外，既然做了千万不要半途而废，我反复了好几次才把事情搞定，还不如一开始一口气做到底。\n#### <font color=blue>方式三</font> ####\n直接在命令行下载驱动，也要进行进入tty1的操作，同方法二。\n\n\tsudo add-apt-repository ppa:xorg-edgers/ppa\n\tsudo apt-get update\n\tsudo apt-get install nvidia-378 #自己指定的版本\n\n这个方法我曾经尝试过，一定是可行的，不过细节方面可以上网查询下。\n\n### <font color=red>安装CUDA</font> ###\n\nCUDA是NVIDIA的编程语言平台，想使用GPU就必须要使用cuda。\n进入[https://developer.nvidia.com/cuda-downloads](https://developer.nvidia.com/cuda-downloads\"cuda\")下载cuda。\n\n\tsudo sh cuda_8.0.27_linux.run#你的版本\n\n其中有确认是否安装显卡驱动，根据自己选择来进行安装。\n\n打开`~/.bashrc`\n\t\n\tsudo gedit ~/.bashrc\n将以下内容写到尾部\n\n\texport PATH=/usr/local/cuda-8.0/bin${PATH:+:${PATH}}\n\texport LD_LIBRARY_PATH=/usr/local/cuda-8.0/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}\n\n### <font color=red>安装CUDNN</font> ###\n进入[https://developer.nvidia.com/rdp/cudnn-download](https://developer.nvidia.com/rdp/cudnn-download\"cudnn\")，需要注册一个账号，选择对应版本下载。\n下载之后解压。\n进入`include`目录\n\n\tsudo cp cudnn.h /usr/local/cuda/include/    #复制头文件\n\t\n返回在进入`lib64`目录\n\n\tsudo cp lib* /usr/local/cuda/lib64/    #复制动态链接库\n\tcd /usr/local/cuda/lib64/\n\tsudo rm -rf libcudnn.so libcudnn.so.5    #删除原有动态文件\n\tsudo ln -s libcudnn.so.5.1.5 libcudnn.so.5  #生成软衔接，注意版本\n\tsudo ln -s libcudnn.so.5 libcudnn.so      #生成软链接\n\n\n### <font color=red>安装OPENCV</font> ###\n进入[http://opencv.org/downloads.html](http://opencv.org/downloads.html\"opencv\")下载并解压，进入文件夹\n\n\tmkdir build\n\tcd build\n\tcmake -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=/usr/local ..  #cmake自己装\n\tmake -j8#完成后一定要记得下一步install\n\tsudo make install\n\t\n如果出现以下错误\n\n\tmodules/cudalegacy/src/graphcuts.cpp:120:54: error: ‘NppiGraphcutState’ has not been declared typedef NppStatus (*init_func_t)(NppiSize oSize, NppiGraphcutState** ppState, Npp8u* pDeviceMem);\n\n这是因为opecv3.0与cuda8.0不兼容导致的。解决办法：\n修改 `~/opencv/modules/cudalegacy/src/graphcuts.cpp`文件内容，将\n\n\t#if !defined (HAVE_CUDA) || defined (CUDA_DISABLER)\n\n改为\n\n\t#if !defined (HAVE_CUDA) || defined (CUDA_DISABLER) || (CUDART_VERSION>=8000)\n\t\n进入`/etc/ld.so.conf.d`，新建`opencv.conf`，添加\n\t\n\t/home/roee/opencv/build/lib\n保存文件后，更新\n\n\tldconfig\n\t\n### <font color=red>安装CAFFE</font> ###\n#### <font color=blue>从github上获取caffe</font> ####\n\n\t\n\tgit clone https://github.com/BVLC/caffe.git #git自己安装\n\t\n#### <font color=blue>配置Makefile.config</font> ####\n\n复制`Makefile.config.example`为`Makefile.config`\n\n\tsudo cp Makefile.config.example Makefile.config\n\tsudo gedit Makefile.config\n\n若仅用cpu，则\n\n\t将\n\t# CPU_ONLY := 1\n\t修改成： \n\tCPU_ONLY := 1\n\n若使用cudnn，则\n\n\t将\n\t# USE_CUDNN := 1\n\t修改成： \n\tUSE_CUDNN := 1\n\t\n若使用的opencv版本是3的，则\n\n\t将\n\t# OPENCV_VERSION := 3 \n\t修改为： \n\tOPENCV_VERSION := 3\n\t\n若要使用Python来编写layer，则\n\n\t将\n\t# WITH_PYTHON_LAYER := 1 \n\t修改为 \n\tWITH_PYTHON_LAYER := 1\n\t\n接下来一定要修改的一项\n\n\t将\n\t# Whatever else you find you need goes here.\t\n\t下面的\n\tINCLUDE_DIRS := $(PYTHON_INCLUDE) /usr/local/include\n\tLIBRARY_DIRS := $(PYTHON_LIB) /usr/local/lib /usr/lib \n\t修改为\n\tINCLUDE_DIRS := $(PYTHON_INCLUDE) /usr/local/include /usr/include/hdf5/serial\n\tLIBRARY_DIRS := $(PYTHON_LIB) /usr/local/lib /usr/lib /usr/lib/x86_64-linux-gnu /usr/lib/x86_64-linux-gnu/hdf5/serial\n\n这是因为ubuntu16.04的文件包含位置发生了变化，尤其是需要用到的hdf5的位置，所以需要更改这一路径。\n\n#### <font color=blue>修改Makefile文件</font> ####\n打开Mkefile文件\n\n\t将\n\tNVCCFLAGS += -ccbin=$(CXX) -Xcompiler -fPIC $(COMMON_FLAGS)\n\t改为\n\tNVCCFLAGS += -D_FORCE_INLINES -ccbin=$(CXX) -Xcompiler -fPIC $(COMMON_FLAGS)\n\t\n\t将\n\tLIBRARIES += glog gflags protobuf boost_system boost_filesystem m hdf5_hl hdf5\n\t改为\n\tLIBRARIES += glog gflags protobuf boost_system boost_filesystem m hdf5_serial_hl hdf5_serial\n\t\n#### <font color=blue>修改host_config.h文件</font> ####\n编辑`/usr/local/cuda/include/host_config.h`\n\n\t将\n\t#error-- unsupported GNU version! gcc versions later than 5 are not supported!\n\t注释掉，即改为\n\t//#error-- unsupported GNU version! gcc versions later than 5 are not supported!\n\t\n#### <font color=blue>编译caffe</font> ####\n\t\n\tmake all -j8\n\t\n软链接问题报错的话，解决方法网上有，较易解决。\n\n### <font color=red>测试MNIST</font> ###\n打开caffe文件，下载mnist数据集\n\n\tsh data/mnist/get_mnist.sh\n\t\n生成mnist的db文件\n\n\tsh examples/mnist/create_mnist.sh\n\t\n用最lenet训练mnist数据集\n\n\tsh examples/mnist/train_lenet.sh\n\t\n结果\n\n![mnist_result](./md_pic/mnist_result.png  \"mnist_result\")\n\t\n其中`accracy = 0.9956`就是测试集的正确率。\n\n### <font color=red>训练自己的图片</font> ###\n\t\n就是现在自己手头上有很多图片，想通过训练得到模型，并进行测试。\n那么将你所有的图片（需要都有`label`）放到一起，交叉验证什么的方式等看完下文自己类比就行。\n#### <font color=blue>选定图片</font> ####\n例如我得到很多叶子的形状，都放入`images`底下\n\n![leaf](./md_pic/leaf.png  \"leaf\")\n\n#### <font color=blue>生成文件路径txt</font> ####\n接下来编辑一个`txt`文件指明文件夹中的图片名称及其对应的`label`。\n\n![txt](./md_pic/txt.png  \"txt\")\n\n注意`label`一定需要数字，且要和文件路径之间有一个空格，文件结尾不要多出一个行，第一个`/`可以不需要，因为是和根目录联合写成绝对路径的，在之后的使用当中就能理解。\n注：生成这个`txt`文件可以通过任何语言，比较推荐的时BASH脚本的形式，真的很方便。另外我自己编写的C语言脚本是`filetxt.c`，可以自己进行修改。\n\n\n#### <font color=blue>使用convert_imageset生成图片DB格式文件</font> ####\n\t\n\t./build/tools/convert_imageset --shuffle --gray ~/Desktop ~/Desktop/TEST.txt ~/Desktop/x\n\n这段的意思是\n\n\tconvert_imageset工具的路径  选项打乱  选项灰度模式  文件路径  txt文件路径  生成DB数据的文件夹\n\t\n其中选项还有各种其他的，例如resize图片大小等等。另外这里的`文件路径`和`txt文件路径`中的路径联合起来作为绝对路径。\n这样可以生成训练集和测试集DB文件。\n\n#### <font color=blue>使用prototxt进行训练的配置</font> ####\n想好用什么网络训练你的样本。\n编写网络的`prototxt`，里面包括data读入层，各种卷基层、下采样层、激活层、全连接层、损失函数层等等。具体的请在网络上找详细的caffe网络介绍。\n编写网络配置的`prototxt`，里面定义了训练的迭代次数，测试次数，梯度下降方式，使用GPU还是CPU等等，并且在之中指明网络结构的`prototxt`文件。\n这里我极其推荐[http://www.cnblogs.com/denny402/p/](http://www.cnblogs.com/denny402/p/)。这个作者写的博文是我见过最全面最详细的。\n\n#### <font color=blue>训练与测试</font> ####\n训练\n\n\t./build/tools/caffe train --solver=examples/leaf/lenet_solver.prototxt\n\t\n这意思是\n\n\tcaffe文件的路径 字段训练 网络结构的配置文件路径\n\t\n测试\n\n\t./build/tools/caffe test --model=examples/leaf/lenet_solver.prototxt --weights=examples/leaf/1000_iter_lenet.caffemodel\n\t\n这意思是\n\n\tcaffe文件的路径 字段测试 网络结构的配置文件路径  训练的权值文件\n\t\n#### <font color=blue>单独测试一张图片</font> ####\n先使用compute_image_mean生成训练集的均值文件。\n\n\t./build/tools/compute_image_mean examples/leaf/train_lmdb mean.binaryproto\n\t\n这里\n\n\tcompute_image_mean路径  训练集DB数据路径  均值文件名\n\n\n再编写一个`words.txt`，里面是数字类标对应的类别名称，例\n\n\tAcer_Capillipes\n\tAcer_Circinatum\n\tAcer_Mono\n\tAcer_Opalus\n\tAcer_Palmatum\n\tAcer_Pictum\n\tAcer_Platanoids\n\tAcer_Rubrum\n\t...\n\t\n注意最后一行不要有空格或者回车，数字类标有多少，对应有几行。\n\n用之的所有东西，测试新的一张图片应该被标记为什么`label`。\n使用`classification.bin`\n\n\t./build/examples/cpp_classification/classification.bin examples/leaf/lenet.prototxt examples/leaf/lenet_iter_1000.caffemodel mean.binaryproto words.txt 1.jpg\n\t\n这里\n\n\tclassification.bin的路径  网络结构文件路径  权值模型路径  图片均值文件  类标txt  图片路径\n\t\n例如得到\n\n\t---------- Prediction for /home/roee/Desktop/images/4.jpg ----------\n\t1.0000 - \"Magnolia_Heptapeta\"\n\t0.0000 - \"Acer_Circinatum\"\n\t0.0000 - \"Acer_Opalus\"\n\t0.0000 - \"Acer_Palmatum\"\n\t0.0000 - \"Acer_Capillipes\"\n\n测试便完成了。\n","slug":"caffe框架的搭建和使用","published":1,"updated":"2017-06-19T11:37:16.329Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj442vv4g0000epk3zvvp1uxh","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>直到现在才对学习的caffe框架进行总结，东西比较多。<br>caffe已经被扩展到了Windows和Linux底下，两种方式我都有尝试，里面的坎坷还不是一般的多，简单来讲并不好上手，个人建议了解为主，以后有针对性地使用。<br>优点：数据转化为DB格式，处理起来的速度是及其快的；<br>缺点：全程C代码编写，不对框架十分了解的话会出现很多小毛病。<br>刚刚年前caffe框架更新，导致我编写的层在编译的时候都报错了。郁闷！<br>本文将介绍caffe在ubuntu下的编译和使用，例子：手写数字体识别。</p>\n<a id=\"more\"></a>\n<h2 id=\"caffe-ubuntu16-04LTS-cuda8-0-GTX960\"><a href=\"#caffe-ubuntu16-04LTS-cuda8-0-GTX960\" class=\"headerlink\" title=\"caffe + ubuntu16.04LTS + cuda8.0 + GTX960\"></a>caffe + ubuntu16.04LTS + cuda8.0 + GTX960</h2><p>对于什么都没有的ubuntu16.04LTS，需要先安装驱动和各种附加包。</p>\n<h3 id=\"安装依赖项\"><a href=\"#安装依赖项\" class=\"headerlink\" title=\"安装依赖项\"></a><font color=\"red\">安装依赖项</font></h3><pre><code>sudo apt-get install libprotobuf-dev libleveldb-dev libsnappy-dev libopencv-dev libhdf5-serial-dev protobuf-compiler \nsudo apt-get install --no-install-recommends libboost-all-dev\nsudo apt-get install libopenblas-dev liblapack-dev libatlas-base-dev\nsudo apt-get install libgflags-dev libgoogle-glog-dev liblmdb-dev\n</code></pre><h3 id=\"安装显卡驱动\"><a href=\"#安装显卡驱动\" class=\"headerlink\" title=\"安装显卡驱动\"></a><font color=\"red\">安装显卡驱动</font></h3><p>注：如果只用CPU编译，可以跳过此部分。</p>\n<h4 id=\"方式一\"><a href=\"#方式一\" class=\"headerlink\" title=\"方式一\"></a><font color=\"blue\">方式一</font></h4><p>左上角（<code>win</code>键）-&gt; 附加驱动（additional drivers）<br><img src=\"./md_pic/additional_drivers_option.png\" alt=\"additional_drivers_option\" title=\"additional_drivers_option\"><br>然后就能看到驱动了。</p>\n<h4 id=\"方式二\"><a href=\"#方式二\" class=\"headerlink\" title=\"方式二\"></a><font color=\"blue\">方式二</font></h4><p> 进入<a href=\"http://www.geforce.cn/drivers/\" title=\"drivers\" target=\"_blank\" rel=\"external\">http://www.geforce.cn/drivers</a> ，选择合适的驱动下载。<br> 下载得到的文件是<code>.run</code>文件。<br> 卸载已经存在的驱动版本</p>\n<pre><code>sudo apt-get remove --purge nvidia*\n</code></pre><p> <code>Ctrl+Alt+F1</code>切换到tty1控制台后，输入</p>\n<pre><code>sudo service lightdm stop\ninit 3\n</code></pre><p>接下来</p>\n<pre><code>sudo ./NVIDIA.run#文件路径\n</code></pre><p>开始安装。<br>期间不同电脑会有不同的问题出现。我有碰到过硬盘保护的情况，不过按照提示进行操作就可以了。<br>另外，既然做了千万不要半途而废，我反复了好几次才把事情搞定，还不如一开始一口气做到底。</p>\n<h4 id=\"方式三\"><a href=\"#方式三\" class=\"headerlink\" title=\"方式三\"></a><font color=\"blue\">方式三</font></h4><p>直接在命令行下载驱动，也要进行进入tty1的操作，同方法二。</p>\n<pre><code>sudo add-apt-repository ppa:xorg-edgers/ppa\nsudo apt-get update\nsudo apt-get install nvidia-378 #自己指定的版本\n</code></pre><p>这个方法我曾经尝试过，一定是可行的，不过细节方面可以上网查询下。</p>\n<h3 id=\"安装CUDA\"><a href=\"#安装CUDA\" class=\"headerlink\" title=\"安装CUDA\"></a><font color=\"red\">安装CUDA</font></h3><p>CUDA是NVIDIA的编程语言平台，想使用GPU就必须要使用cuda。<br>进入<a href=\"https://developer.nvidia.com/cuda-downloads&quot;cuda&quot;\" target=\"_blank\" rel=\"external\">https://developer.nvidia.com/cuda-downloads</a>下载cuda。</p>\n<pre><code>sudo sh cuda_8.0.27_linux.run#你的版本\n</code></pre><p>其中有确认是否安装显卡驱动，根据自己选择来进行安装。</p>\n<p>打开<code>~/.bashrc</code></p>\n<pre><code>sudo gedit ~/.bashrc\n</code></pre><p>将以下内容写到尾部</p>\n<pre><code>export PATH=/usr/local/cuda-8.0/bin${PATH:+:${PATH}}\nexport LD_LIBRARY_PATH=/usr/local/cuda-8.0/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}\n</code></pre><h3 id=\"安装CUDNN\"><a href=\"#安装CUDNN\" class=\"headerlink\" title=\"安装CUDNN\"></a><font color=\"red\">安装CUDNN</font></h3><p>进入<a href=\"https://developer.nvidia.com/rdp/cudnn-download&quot;cudnn&quot;\" target=\"_blank\" rel=\"external\">https://developer.nvidia.com/rdp/cudnn-download</a>，需要注册一个账号，选择对应版本下载。<br>下载之后解压。<br>进入<code>include</code>目录</p>\n<pre><code>sudo cp cudnn.h /usr/local/cuda/include/    #复制头文件\n</code></pre><p>返回在进入<code>lib64</code>目录</p>\n<pre><code>sudo cp lib* /usr/local/cuda/lib64/    #复制动态链接库\ncd /usr/local/cuda/lib64/\nsudo rm -rf libcudnn.so libcudnn.so.5    #删除原有动态文件\nsudo ln -s libcudnn.so.5.1.5 libcudnn.so.5  #生成软衔接，注意版本\nsudo ln -s libcudnn.so.5 libcudnn.so      #生成软链接\n</code></pre><h3 id=\"安装OPENCV\"><a href=\"#安装OPENCV\" class=\"headerlink\" title=\"安装OPENCV\"></a><font color=\"red\">安装OPENCV</font></h3><p>进入<a href=\"http://opencv.org/downloads.html&quot;opencv&quot;\" target=\"_blank\" rel=\"external\">http://opencv.org/downloads.html</a>下载并解压，进入文件夹</p>\n<pre><code>mkdir build\ncd build\ncmake -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=/usr/local ..  #cmake自己装\nmake -j8#完成后一定要记得下一步install\nsudo make install\n</code></pre><p>如果出现以下错误</p>\n<pre><code>modules/cudalegacy/src/graphcuts.cpp:120:54: error: ‘NppiGraphcutState’ has not been declared typedef NppStatus (*init_func_t)(NppiSize oSize, NppiGraphcutState** ppState, Npp8u* pDeviceMem);\n</code></pre><p>这是因为opecv3.0与cuda8.0不兼容导致的。解决办法：<br>修改 <code>~/opencv/modules/cudalegacy/src/graphcuts.cpp</code>文件内容，将</p>\n<pre><code>#if !defined (HAVE_CUDA) || defined (CUDA_DISABLER)\n</code></pre><p>改为</p>\n<pre><code>#if !defined (HAVE_CUDA) || defined (CUDA_DISABLER) || (CUDART_VERSION&gt;=8000)\n</code></pre><p>进入<code>/etc/ld.so.conf.d</code>，新建<code>opencv.conf</code>，添加</p>\n<pre><code>/home/roee/opencv/build/lib\n</code></pre><p>保存文件后，更新</p>\n<pre><code>ldconfig\n</code></pre><h3 id=\"安装CAFFE\"><a href=\"#安装CAFFE\" class=\"headerlink\" title=\"安装CAFFE\"></a><font color=\"red\">安装CAFFE</font></h3><h4 id=\"从github上获取caffe\"><a href=\"#从github上获取caffe\" class=\"headerlink\" title=\"从github上获取caffe\"></a><font color=\"blue\">从github上获取caffe</font></h4><pre><code>git clone https://github.com/BVLC/caffe.git #git自己安装\n</code></pre><h4 id=\"配置Makefile-config\"><a href=\"#配置Makefile-config\" class=\"headerlink\" title=\"配置Makefile.config\"></a><font color=\"blue\">配置Makefile.config</font></h4><p>复制<code>Makefile.config.example</code>为<code>Makefile.config</code></p>\n<pre><code>sudo cp Makefile.config.example Makefile.config\nsudo gedit Makefile.config\n</code></pre><p>若仅用cpu，则</p>\n<pre><code>将\n# CPU_ONLY := 1\n修改成： \nCPU_ONLY := 1\n</code></pre><p>若使用cudnn，则</p>\n<pre><code>将\n# USE_CUDNN := 1\n修改成： \nUSE_CUDNN := 1\n</code></pre><p>若使用的opencv版本是3的，则</p>\n<pre><code>将\n# OPENCV_VERSION := 3 \n修改为： \nOPENCV_VERSION := 3\n</code></pre><p>若要使用Python来编写layer，则</p>\n<pre><code>将\n# WITH_PYTHON_LAYER := 1 \n修改为 \nWITH_PYTHON_LAYER := 1\n</code></pre><p>接下来一定要修改的一项</p>\n<pre><code>将\n# Whatever else you find you need goes here.    \n下面的\nINCLUDE_DIRS := $(PYTHON_INCLUDE) /usr/local/include\nLIBRARY_DIRS := $(PYTHON_LIB) /usr/local/lib /usr/lib \n修改为\nINCLUDE_DIRS := $(PYTHON_INCLUDE) /usr/local/include /usr/include/hdf5/serial\nLIBRARY_DIRS := $(PYTHON_LIB) /usr/local/lib /usr/lib /usr/lib/x86_64-linux-gnu /usr/lib/x86_64-linux-gnu/hdf5/serial\n</code></pre><p>这是因为ubuntu16.04的文件包含位置发生了变化，尤其是需要用到的hdf5的位置，所以需要更改这一路径。</p>\n<h4 id=\"修改Makefile文件\"><a href=\"#修改Makefile文件\" class=\"headerlink\" title=\"修改Makefile文件\"></a><font color=\"blue\">修改Makefile文件</font></h4><p>打开Mkefile文件</p>\n<pre><code>将\nNVCCFLAGS += -ccbin=$(CXX) -Xcompiler -fPIC $(COMMON_FLAGS)\n改为\nNVCCFLAGS += -D_FORCE_INLINES -ccbin=$(CXX) -Xcompiler -fPIC $(COMMON_FLAGS)\n\n将\nLIBRARIES += glog gflags protobuf boost_system boost_filesystem m hdf5_hl hdf5\n改为\nLIBRARIES += glog gflags protobuf boost_system boost_filesystem m hdf5_serial_hl hdf5_serial\n</code></pre><h4 id=\"修改host-config-h文件\"><a href=\"#修改host-config-h文件\" class=\"headerlink\" title=\"修改host_config.h文件\"></a><font color=\"blue\">修改host_config.h文件</font></h4><p>编辑<code>/usr/local/cuda/include/host_config.h</code></p>\n<pre><code>将\n#error-- unsupported GNU version! gcc versions later than 5 are not supported!\n注释掉，即改为\n//#error-- unsupported GNU version! gcc versions later than 5 are not supported!\n</code></pre><h4 id=\"编译caffe\"><a href=\"#编译caffe\" class=\"headerlink\" title=\"编译caffe\"></a><font color=\"blue\">编译caffe</font></h4><pre><code>make all -j8\n</code></pre><p>软链接问题报错的话，解决方法网上有，较易解决。</p>\n<h3 id=\"测试MNIST\"><a href=\"#测试MNIST\" class=\"headerlink\" title=\"测试MNIST\"></a><font color=\"red\">测试MNIST</font></h3><p>打开caffe文件，下载mnist数据集</p>\n<pre><code>sh data/mnist/get_mnist.sh\n</code></pre><p>生成mnist的db文件</p>\n<pre><code>sh examples/mnist/create_mnist.sh\n</code></pre><p>用最lenet训练mnist数据集</p>\n<pre><code>sh examples/mnist/train_lenet.sh\n</code></pre><p>结果</p>\n<p><img src=\"./md_pic/mnist_result.png\" alt=\"mnist_result\" title=\"mnist_result\"></p>\n<p>其中<code>accracy = 0.9956</code>就是测试集的正确率。</p>\n<h3 id=\"训练自己的图片\"><a href=\"#训练自己的图片\" class=\"headerlink\" title=\"训练自己的图片\"></a><font color=\"red\">训练自己的图片</font></h3><p>就是现在自己手头上有很多图片，想通过训练得到模型，并进行测试。<br>那么将你所有的图片（需要都有<code>label</code>）放到一起，交叉验证什么的方式等看完下文自己类比就行。</p>\n<h4 id=\"选定图片\"><a href=\"#选定图片\" class=\"headerlink\" title=\"选定图片\"></a><font color=\"blue\">选定图片</font></h4><p>例如我得到很多叶子的形状，都放入<code>images</code>底下</p>\n<p><img src=\"./md_pic/leaf.png\" alt=\"leaf\" title=\"leaf\"></p>\n<h4 id=\"生成文件路径txt\"><a href=\"#生成文件路径txt\" class=\"headerlink\" title=\"生成文件路径txt\"></a><font color=\"blue\">生成文件路径txt</font></h4><p>接下来编辑一个<code>txt</code>文件指明文件夹中的图片名称及其对应的<code>label</code>。</p>\n<p><img src=\"./md_pic/txt.png\" alt=\"txt\" title=\"txt\"></p>\n<p>注意<code>label</code>一定需要数字，且要和文件路径之间有一个空格，文件结尾不要多出一个行，第一个<code>/</code>可以不需要，因为是和根目录联合写成绝对路径的，在之后的使用当中就能理解。<br>注：生成这个<code>txt</code>文件可以通过任何语言，比较推荐的时BASH脚本的形式，真的很方便。另外我自己编写的C语言脚本是<code>filetxt.c</code>，可以自己进行修改。</p>\n<h4 id=\"使用convert-imageset生成图片DB格式文件\"><a href=\"#使用convert-imageset生成图片DB格式文件\" class=\"headerlink\" title=\"使用convert_imageset生成图片DB格式文件\"></a><font color=\"blue\">使用convert_imageset生成图片DB格式文件</font></h4><pre><code>./build/tools/convert_imageset --shuffle --gray ~/Desktop ~/Desktop/TEST.txt ~/Desktop/x\n</code></pre><p>这段的意思是</p>\n<pre><code>convert_imageset工具的路径  选项打乱  选项灰度模式  文件路径  txt文件路径  生成DB数据的文件夹\n</code></pre><p>其中选项还有各种其他的，例如resize图片大小等等。另外这里的<code>文件路径</code>和<code>txt文件路径</code>中的路径联合起来作为绝对路径。<br>这样可以生成训练集和测试集DB文件。</p>\n<h4 id=\"使用prototxt进行训练的配置\"><a href=\"#使用prototxt进行训练的配置\" class=\"headerlink\" title=\"使用prototxt进行训练的配置\"></a><font color=\"blue\">使用prototxt进行训练的配置</font></h4><p>想好用什么网络训练你的样本。<br>编写网络的<code>prototxt</code>，里面包括data读入层，各种卷基层、下采样层、激活层、全连接层、损失函数层等等。具体的请在网络上找详细的caffe网络介绍。<br>编写网络配置的<code>prototxt</code>，里面定义了训练的迭代次数，测试次数，梯度下降方式，使用GPU还是CPU等等，并且在之中指明网络结构的<code>prototxt</code>文件。<br>这里我极其推荐<a href=\"http://www.cnblogs.com/denny402/p/\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/denny402/p/</a>。这个作者写的博文是我见过最全面最详细的。</p>\n<h4 id=\"训练与测试\"><a href=\"#训练与测试\" class=\"headerlink\" title=\"训练与测试\"></a><font color=\"blue\">训练与测试</font></h4><p>训练</p>\n<pre><code>./build/tools/caffe train --solver=examples/leaf/lenet_solver.prototxt\n</code></pre><p>这意思是</p>\n<pre><code>caffe文件的路径 字段训练 网络结构的配置文件路径\n</code></pre><p>测试</p>\n<pre><code>./build/tools/caffe test --model=examples/leaf/lenet_solver.prototxt --weights=examples/leaf/1000_iter_lenet.caffemodel\n</code></pre><p>这意思是</p>\n<pre><code>caffe文件的路径 字段测试 网络结构的配置文件路径  训练的权值文件\n</code></pre><h4 id=\"单独测试一张图片\"><a href=\"#单独测试一张图片\" class=\"headerlink\" title=\"单独测试一张图片\"></a><font color=\"blue\">单独测试一张图片</font></h4><p>先使用compute_image_mean生成训练集的均值文件。</p>\n<pre><code>./build/tools/compute_image_mean examples/leaf/train_lmdb mean.binaryproto\n</code></pre><p>这里</p>\n<pre><code>compute_image_mean路径  训练集DB数据路径  均值文件名\n</code></pre><p>再编写一个<code>words.txt</code>，里面是数字类标对应的类别名称，例</p>\n<pre><code>Acer_Capillipes\nAcer_Circinatum\nAcer_Mono\nAcer_Opalus\nAcer_Palmatum\nAcer_Pictum\nAcer_Platanoids\nAcer_Rubrum\n...\n</code></pre><p>注意最后一行不要有空格或者回车，数字类标有多少，对应有几行。</p>\n<p>用之的所有东西，测试新的一张图片应该被标记为什么<code>label</code>。<br>使用<code>classification.bin</code></p>\n<pre><code>./build/examples/cpp_classification/classification.bin examples/leaf/lenet.prototxt examples/leaf/lenet_iter_1000.caffemodel mean.binaryproto words.txt 1.jpg\n</code></pre><p>这里</p>\n<pre><code>classification.bin的路径  网络结构文件路径  权值模型路径  图片均值文件  类标txt  图片路径\n</code></pre><p>例如得到</p>\n<pre><code>---------- Prediction for /home/roee/Desktop/images/4.jpg ----------\n1.0000 - &quot;Magnolia_Heptapeta&quot;\n0.0000 - &quot;Acer_Circinatum&quot;\n0.0000 - &quot;Acer_Opalus&quot;\n0.0000 - &quot;Acer_Palmatum&quot;\n0.0000 - &quot;Acer_Capillipes&quot;\n</code></pre><p>测试便完成了。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>直到现在才对学习的caffe框架进行总结，东西比较多。<br>caffe已经被扩展到了Windows和Linux底下，两种方式我都有尝试，里面的坎坷还不是一般的多，简单来讲并不好上手，个人建议了解为主，以后有针对性地使用。<br>优点：数据转化为DB格式，处理起来的速度是及其快的；<br>缺点：全程C代码编写，不对框架十分了解的话会出现很多小毛病。<br>刚刚年前caffe框架更新，导致我编写的层在编译的时候都报错了。郁闷！<br>本文将介绍caffe在ubuntu下的编译和使用，例子：手写数字体识别。</p>","more":"<h2 id=\"caffe-ubuntu16-04LTS-cuda8-0-GTX960\"><a href=\"#caffe-ubuntu16-04LTS-cuda8-0-GTX960\" class=\"headerlink\" title=\"caffe + ubuntu16.04LTS + cuda8.0 + GTX960\"></a>caffe + ubuntu16.04LTS + cuda8.0 + GTX960</h2><p>对于什么都没有的ubuntu16.04LTS，需要先安装驱动和各种附加包。</p>\n<h3 id=\"安装依赖项\"><a href=\"#安装依赖项\" class=\"headerlink\" title=\"安装依赖项\"></a><font color=\"red\">安装依赖项</font></h3><pre><code>sudo apt-get install libprotobuf-dev libleveldb-dev libsnappy-dev libopencv-dev libhdf5-serial-dev protobuf-compiler \nsudo apt-get install --no-install-recommends libboost-all-dev\nsudo apt-get install libopenblas-dev liblapack-dev libatlas-base-dev\nsudo apt-get install libgflags-dev libgoogle-glog-dev liblmdb-dev\n</code></pre><h3 id=\"安装显卡驱动\"><a href=\"#安装显卡驱动\" class=\"headerlink\" title=\"安装显卡驱动\"></a><font color=\"red\">安装显卡驱动</font></h3><p>注：如果只用CPU编译，可以跳过此部分。</p>\n<h4 id=\"方式一\"><a href=\"#方式一\" class=\"headerlink\" title=\"方式一\"></a><font color=\"blue\">方式一</font></h4><p>左上角（<code>win</code>键）-&gt; 附加驱动（additional drivers）<br><img src=\"./md_pic/additional_drivers_option.png\" alt=\"additional_drivers_option\" title=\"additional_drivers_option\"><br>然后就能看到驱动了。</p>\n<h4 id=\"方式二\"><a href=\"#方式二\" class=\"headerlink\" title=\"方式二\"></a><font color=\"blue\">方式二</font></h4><p> 进入<a href=\"http://www.geforce.cn/drivers/\" title=\"drivers\" target=\"_blank\" rel=\"external\">http://www.geforce.cn/drivers</a> ，选择合适的驱动下载。<br> 下载得到的文件是<code>.run</code>文件。<br> 卸载已经存在的驱动版本</p>\n<pre><code>sudo apt-get remove --purge nvidia*\n</code></pre><p> <code>Ctrl+Alt+F1</code>切换到tty1控制台后，输入</p>\n<pre><code>sudo service lightdm stop\ninit 3\n</code></pre><p>接下来</p>\n<pre><code>sudo ./NVIDIA.run#文件路径\n</code></pre><p>开始安装。<br>期间不同电脑会有不同的问题出现。我有碰到过硬盘保护的情况，不过按照提示进行操作就可以了。<br>另外，既然做了千万不要半途而废，我反复了好几次才把事情搞定，还不如一开始一口气做到底。</p>\n<h4 id=\"方式三\"><a href=\"#方式三\" class=\"headerlink\" title=\"方式三\"></a><font color=\"blue\">方式三</font></h4><p>直接在命令行下载驱动，也要进行进入tty1的操作，同方法二。</p>\n<pre><code>sudo add-apt-repository ppa:xorg-edgers/ppa\nsudo apt-get update\nsudo apt-get install nvidia-378 #自己指定的版本\n</code></pre><p>这个方法我曾经尝试过，一定是可行的，不过细节方面可以上网查询下。</p>\n<h3 id=\"安装CUDA\"><a href=\"#安装CUDA\" class=\"headerlink\" title=\"安装CUDA\"></a><font color=\"red\">安装CUDA</font></h3><p>CUDA是NVIDIA的编程语言平台，想使用GPU就必须要使用cuda。<br>进入<a href=\"https://developer.nvidia.com/cuda-downloads&quot;cuda&quot;\" target=\"_blank\" rel=\"external\">https://developer.nvidia.com/cuda-downloads</a>下载cuda。</p>\n<pre><code>sudo sh cuda_8.0.27_linux.run#你的版本\n</code></pre><p>其中有确认是否安装显卡驱动，根据自己选择来进行安装。</p>\n<p>打开<code>~/.bashrc</code></p>\n<pre><code>sudo gedit ~/.bashrc\n</code></pre><p>将以下内容写到尾部</p>\n<pre><code>export PATH=/usr/local/cuda-8.0/bin${PATH:+:${PATH}}\nexport LD_LIBRARY_PATH=/usr/local/cuda-8.0/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}\n</code></pre><h3 id=\"安装CUDNN\"><a href=\"#安装CUDNN\" class=\"headerlink\" title=\"安装CUDNN\"></a><font color=\"red\">安装CUDNN</font></h3><p>进入<a href=\"https://developer.nvidia.com/rdp/cudnn-download&quot;cudnn&quot;\" target=\"_blank\" rel=\"external\">https://developer.nvidia.com/rdp/cudnn-download</a>，需要注册一个账号，选择对应版本下载。<br>下载之后解压。<br>进入<code>include</code>目录</p>\n<pre><code>sudo cp cudnn.h /usr/local/cuda/include/    #复制头文件\n</code></pre><p>返回在进入<code>lib64</code>目录</p>\n<pre><code>sudo cp lib* /usr/local/cuda/lib64/    #复制动态链接库\ncd /usr/local/cuda/lib64/\nsudo rm -rf libcudnn.so libcudnn.so.5    #删除原有动态文件\nsudo ln -s libcudnn.so.5.1.5 libcudnn.so.5  #生成软衔接，注意版本\nsudo ln -s libcudnn.so.5 libcudnn.so      #生成软链接\n</code></pre><h3 id=\"安装OPENCV\"><a href=\"#安装OPENCV\" class=\"headerlink\" title=\"安装OPENCV\"></a><font color=\"red\">安装OPENCV</font></h3><p>进入<a href=\"http://opencv.org/downloads.html&quot;opencv&quot;\" target=\"_blank\" rel=\"external\">http://opencv.org/downloads.html</a>下载并解压，进入文件夹</p>\n<pre><code>mkdir build\ncd build\ncmake -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=/usr/local ..  #cmake自己装\nmake -j8#完成后一定要记得下一步install\nsudo make install\n</code></pre><p>如果出现以下错误</p>\n<pre><code>modules/cudalegacy/src/graphcuts.cpp:120:54: error: ‘NppiGraphcutState’ has not been declared typedef NppStatus (*init_func_t)(NppiSize oSize, NppiGraphcutState** ppState, Npp8u* pDeviceMem);\n</code></pre><p>这是因为opecv3.0与cuda8.0不兼容导致的。解决办法：<br>修改 <code>~/opencv/modules/cudalegacy/src/graphcuts.cpp</code>文件内容，将</p>\n<pre><code>#if !defined (HAVE_CUDA) || defined (CUDA_DISABLER)\n</code></pre><p>改为</p>\n<pre><code>#if !defined (HAVE_CUDA) || defined (CUDA_DISABLER) || (CUDART_VERSION&gt;=8000)\n</code></pre><p>进入<code>/etc/ld.so.conf.d</code>，新建<code>opencv.conf</code>，添加</p>\n<pre><code>/home/roee/opencv/build/lib\n</code></pre><p>保存文件后，更新</p>\n<pre><code>ldconfig\n</code></pre><h3 id=\"安装CAFFE\"><a href=\"#安装CAFFE\" class=\"headerlink\" title=\"安装CAFFE\"></a><font color=\"red\">安装CAFFE</font></h3><h4 id=\"从github上获取caffe\"><a href=\"#从github上获取caffe\" class=\"headerlink\" title=\"从github上获取caffe\"></a><font color=\"blue\">从github上获取caffe</font></h4><pre><code>git clone https://github.com/BVLC/caffe.git #git自己安装\n</code></pre><h4 id=\"配置Makefile-config\"><a href=\"#配置Makefile-config\" class=\"headerlink\" title=\"配置Makefile.config\"></a><font color=\"blue\">配置Makefile.config</font></h4><p>复制<code>Makefile.config.example</code>为<code>Makefile.config</code></p>\n<pre><code>sudo cp Makefile.config.example Makefile.config\nsudo gedit Makefile.config\n</code></pre><p>若仅用cpu，则</p>\n<pre><code>将\n# CPU_ONLY := 1\n修改成： \nCPU_ONLY := 1\n</code></pre><p>若使用cudnn，则</p>\n<pre><code>将\n# USE_CUDNN := 1\n修改成： \nUSE_CUDNN := 1\n</code></pre><p>若使用的opencv版本是3的，则</p>\n<pre><code>将\n# OPENCV_VERSION := 3 \n修改为： \nOPENCV_VERSION := 3\n</code></pre><p>若要使用Python来编写layer，则</p>\n<pre><code>将\n# WITH_PYTHON_LAYER := 1 \n修改为 \nWITH_PYTHON_LAYER := 1\n</code></pre><p>接下来一定要修改的一项</p>\n<pre><code>将\n# Whatever else you find you need goes here.    \n下面的\nINCLUDE_DIRS := $(PYTHON_INCLUDE) /usr/local/include\nLIBRARY_DIRS := $(PYTHON_LIB) /usr/local/lib /usr/lib \n修改为\nINCLUDE_DIRS := $(PYTHON_INCLUDE) /usr/local/include /usr/include/hdf5/serial\nLIBRARY_DIRS := $(PYTHON_LIB) /usr/local/lib /usr/lib /usr/lib/x86_64-linux-gnu /usr/lib/x86_64-linux-gnu/hdf5/serial\n</code></pre><p>这是因为ubuntu16.04的文件包含位置发生了变化，尤其是需要用到的hdf5的位置，所以需要更改这一路径。</p>\n<h4 id=\"修改Makefile文件\"><a href=\"#修改Makefile文件\" class=\"headerlink\" title=\"修改Makefile文件\"></a><font color=\"blue\">修改Makefile文件</font></h4><p>打开Mkefile文件</p>\n<pre><code>将\nNVCCFLAGS += -ccbin=$(CXX) -Xcompiler -fPIC $(COMMON_FLAGS)\n改为\nNVCCFLAGS += -D_FORCE_INLINES -ccbin=$(CXX) -Xcompiler -fPIC $(COMMON_FLAGS)\n\n将\nLIBRARIES += glog gflags protobuf boost_system boost_filesystem m hdf5_hl hdf5\n改为\nLIBRARIES += glog gflags protobuf boost_system boost_filesystem m hdf5_serial_hl hdf5_serial\n</code></pre><h4 id=\"修改host-config-h文件\"><a href=\"#修改host-config-h文件\" class=\"headerlink\" title=\"修改host_config.h文件\"></a><font color=\"blue\">修改host_config.h文件</font></h4><p>编辑<code>/usr/local/cuda/include/host_config.h</code></p>\n<pre><code>将\n#error-- unsupported GNU version! gcc versions later than 5 are not supported!\n注释掉，即改为\n//#error-- unsupported GNU version! gcc versions later than 5 are not supported!\n</code></pre><h4 id=\"编译caffe\"><a href=\"#编译caffe\" class=\"headerlink\" title=\"编译caffe\"></a><font color=\"blue\">编译caffe</font></h4><pre><code>make all -j8\n</code></pre><p>软链接问题报错的话，解决方法网上有，较易解决。</p>\n<h3 id=\"测试MNIST\"><a href=\"#测试MNIST\" class=\"headerlink\" title=\"测试MNIST\"></a><font color=\"red\">测试MNIST</font></h3><p>打开caffe文件，下载mnist数据集</p>\n<pre><code>sh data/mnist/get_mnist.sh\n</code></pre><p>生成mnist的db文件</p>\n<pre><code>sh examples/mnist/create_mnist.sh\n</code></pre><p>用最lenet训练mnist数据集</p>\n<pre><code>sh examples/mnist/train_lenet.sh\n</code></pre><p>结果</p>\n<p><img src=\"./md_pic/mnist_result.png\" alt=\"mnist_result\" title=\"mnist_result\"></p>\n<p>其中<code>accracy = 0.9956</code>就是测试集的正确率。</p>\n<h3 id=\"训练自己的图片\"><a href=\"#训练自己的图片\" class=\"headerlink\" title=\"训练自己的图片\"></a><font color=\"red\">训练自己的图片</font></h3><p>就是现在自己手头上有很多图片，想通过训练得到模型，并进行测试。<br>那么将你所有的图片（需要都有<code>label</code>）放到一起，交叉验证什么的方式等看完下文自己类比就行。</p>\n<h4 id=\"选定图片\"><a href=\"#选定图片\" class=\"headerlink\" title=\"选定图片\"></a><font color=\"blue\">选定图片</font></h4><p>例如我得到很多叶子的形状，都放入<code>images</code>底下</p>\n<p><img src=\"./md_pic/leaf.png\" alt=\"leaf\" title=\"leaf\"></p>\n<h4 id=\"生成文件路径txt\"><a href=\"#生成文件路径txt\" class=\"headerlink\" title=\"生成文件路径txt\"></a><font color=\"blue\">生成文件路径txt</font></h4><p>接下来编辑一个<code>txt</code>文件指明文件夹中的图片名称及其对应的<code>label</code>。</p>\n<p><img src=\"./md_pic/txt.png\" alt=\"txt\" title=\"txt\"></p>\n<p>注意<code>label</code>一定需要数字，且要和文件路径之间有一个空格，文件结尾不要多出一个行，第一个<code>/</code>可以不需要，因为是和根目录联合写成绝对路径的，在之后的使用当中就能理解。<br>注：生成这个<code>txt</code>文件可以通过任何语言，比较推荐的时BASH脚本的形式，真的很方便。另外我自己编写的C语言脚本是<code>filetxt.c</code>，可以自己进行修改。</p>\n<h4 id=\"使用convert-imageset生成图片DB格式文件\"><a href=\"#使用convert-imageset生成图片DB格式文件\" class=\"headerlink\" title=\"使用convert_imageset生成图片DB格式文件\"></a><font color=\"blue\">使用convert_imageset生成图片DB格式文件</font></h4><pre><code>./build/tools/convert_imageset --shuffle --gray ~/Desktop ~/Desktop/TEST.txt ~/Desktop/x\n</code></pre><p>这段的意思是</p>\n<pre><code>convert_imageset工具的路径  选项打乱  选项灰度模式  文件路径  txt文件路径  生成DB数据的文件夹\n</code></pre><p>其中选项还有各种其他的，例如resize图片大小等等。另外这里的<code>文件路径</code>和<code>txt文件路径</code>中的路径联合起来作为绝对路径。<br>这样可以生成训练集和测试集DB文件。</p>\n<h4 id=\"使用prototxt进行训练的配置\"><a href=\"#使用prototxt进行训练的配置\" class=\"headerlink\" title=\"使用prototxt进行训练的配置\"></a><font color=\"blue\">使用prototxt进行训练的配置</font></h4><p>想好用什么网络训练你的样本。<br>编写网络的<code>prototxt</code>，里面包括data读入层，各种卷基层、下采样层、激活层、全连接层、损失函数层等等。具体的请在网络上找详细的caffe网络介绍。<br>编写网络配置的<code>prototxt</code>，里面定义了训练的迭代次数，测试次数，梯度下降方式，使用GPU还是CPU等等，并且在之中指明网络结构的<code>prototxt</code>文件。<br>这里我极其推荐<a href=\"http://www.cnblogs.com/denny402/p/\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/denny402/p/</a>。这个作者写的博文是我见过最全面最详细的。</p>\n<h4 id=\"训练与测试\"><a href=\"#训练与测试\" class=\"headerlink\" title=\"训练与测试\"></a><font color=\"blue\">训练与测试</font></h4><p>训练</p>\n<pre><code>./build/tools/caffe train --solver=examples/leaf/lenet_solver.prototxt\n</code></pre><p>这意思是</p>\n<pre><code>caffe文件的路径 字段训练 网络结构的配置文件路径\n</code></pre><p>测试</p>\n<pre><code>./build/tools/caffe test --model=examples/leaf/lenet_solver.prototxt --weights=examples/leaf/1000_iter_lenet.caffemodel\n</code></pre><p>这意思是</p>\n<pre><code>caffe文件的路径 字段测试 网络结构的配置文件路径  训练的权值文件\n</code></pre><h4 id=\"单独测试一张图片\"><a href=\"#单独测试一张图片\" class=\"headerlink\" title=\"单独测试一张图片\"></a><font color=\"blue\">单独测试一张图片</font></h4><p>先使用compute_image_mean生成训练集的均值文件。</p>\n<pre><code>./build/tools/compute_image_mean examples/leaf/train_lmdb mean.binaryproto\n</code></pre><p>这里</p>\n<pre><code>compute_image_mean路径  训练集DB数据路径  均值文件名\n</code></pre><p>再编写一个<code>words.txt</code>，里面是数字类标对应的类别名称，例</p>\n<pre><code>Acer_Capillipes\nAcer_Circinatum\nAcer_Mono\nAcer_Opalus\nAcer_Palmatum\nAcer_Pictum\nAcer_Platanoids\nAcer_Rubrum\n...\n</code></pre><p>注意最后一行不要有空格或者回车，数字类标有多少，对应有几行。</p>\n<p>用之的所有东西，测试新的一张图片应该被标记为什么<code>label</code>。<br>使用<code>classification.bin</code></p>\n<pre><code>./build/examples/cpp_classification/classification.bin examples/leaf/lenet.prototxt examples/leaf/lenet_iter_1000.caffemodel mean.binaryproto words.txt 1.jpg\n</code></pre><p>这里</p>\n<pre><code>classification.bin的路径  网络结构文件路径  权值模型路径  图片均值文件  类标txt  图片路径\n</code></pre><p>例如得到</p>\n<pre><code>---------- Prediction for /home/roee/Desktop/images/4.jpg ----------\n1.0000 - &quot;Magnolia_Heptapeta&quot;\n0.0000 - &quot;Acer_Circinatum&quot;\n0.0000 - &quot;Acer_Opalus&quot;\n0.0000 - &quot;Acer_Palmatum&quot;\n0.0000 - &quot;Acer_Capillipes&quot;\n</code></pre><p>测试便完成了。</p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cj442vv4g0000epk3zvvp1uxh","tag_id":"cj442vv4m0001epk3s20yhlhi","_id":"cj442vv4p0002epk38hczhjuq"}],"Tag":[{"name":"caffe dl CNN","_id":"cj442vv4m0001epk3s20yhlhi"}]}}